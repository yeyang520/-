/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *left;
 *     struct Node *right;
 *     struct Node *next;
 * };
 */

struct Node* connect(struct Node* root) {
	if(!root)return root;
    struct Node *q[10000];
    int l=0,r=0;
    q[r++]=root;
    while(l<r){
        int tem=l;
        int temp=r;
        while(l<temp){
            if(q[l]->left)q[r++]=q[l]->left;
            if(q[l]->right)q[r++]=q[l]->right;
            l++;
        }
        for(int i=tem;i<(temp-1);++i)q[i]->next=q[i+1];
    }
    return root;
}


/*

other

不开辟新空间

空间复杂度 O(1)
*/

/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *left;
 *     struct Node *right;
 *     struct Node *next;
 * };
 */
//每次依据上层的next位置已经知道
struct Node* connect(struct Node* root) {
	if(!root)return root;
    struct Node*pre=root;
    while(pre->left){
        struct Node *temp=pre;
        while(temp){
            temp->left->next=temp->right;//连接父母节点下的左右
            if(temp->next)temp->right->next=temp->next->left;//连接亲戚间的结点
            temp=temp->next;
        }
        pre=pre->left;
    }
    return root;
}
