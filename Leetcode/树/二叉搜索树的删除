/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
    五种情况
    1.根节点不存在
    2.删除节点的左右孩子为空 直接删除
    3.删除孩子的左节点为空，右节点补位
    4.删除孩子的右节点为空，左节点补位
    5。左右节点都存在，将左节点放到右节点的最左边
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(!root)return root;
        if(root->val==key){
            if(!root->left&&!root->right)
            {
                delete root;
                return NULL;
            }
            else if(!root->left&&root->right)return root->right;
            else if(root->left&&!root->right)return root->left;
            else 
            {
                TreeNode*cur=root->right;
                TreeNode*t=root->right;
                while(t->left)t=t->left;
                t->left=root->left;
                delete root;
                return cur;
            }
        }
        if(root->val>key)root->left=deleteNode(root->left,key);
        if(root->val<key)root->right=deleteNode(root->right,key);
        return root;
    }
};
