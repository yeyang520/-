/*
  找到最左边和最右边的值，返回最大的那个
  每次更新res，为左边的值加上右边的值


*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    int res;
public:
    int back(TreeNode *root,int val)
    {
        if(!root)return 0;
        int left=back(root->left,root->val);
        int right=back(root->right,root->val);
        //每次更新最大值
        res=max(res,left+right);
        //如果跟上一个结点相等，就返回一个最大值
        if(root->val==val)
        {
            return max(left,right)+1;
        }
        return 0;
    }
    int longestUnivaluePath(TreeNode* root) {
        if(!root)return 0;
        res=0;
        back(root,root->val);
        return res;
    }
};
