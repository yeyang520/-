/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /*
    将二叉树序列化，存放到哈希表中
 */
class Solution {
public:
    string help(TreeNode *root,vector<TreeNode*>&result,unordered_map<string,int>&mp)
    {
        if(!root)return "#" ;
        string str;
        str = to_string(root->val) +' '+ help(root->left,result,mp)+' '+help(root->right,result,mp);
        if(mp[str] == 1)result.push_back(root);
        mp[str]++;
        return str;

    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>result;
        unordered_map<string,int>mp;
        help(root,result,mp);
        return result;
    }
};
