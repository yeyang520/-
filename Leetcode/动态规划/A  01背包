#include<iostream>
#include<vector>
using namespace std;



/*
    01背包问题 
    有N件物品和一个最多能被重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。
    每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大

    dp数组
     \ j 0   1   2   3   4      
    i   ---------------------
    0  |   |   |   |   |   |
        ---------------------
    1   |   |   |   |   |   |
        ---------------------
    2   |   |   |   |   |   |
        ---------------------
    
    i代表第i件物品，j代表背包容量，dp[i][j]代表 当背包容量为 j 时，从0~i中选择物品，得到的最大价值

    推导公式 ：d[i][j] = max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])

                dp[i-1][j]代表不选 i 且背包容量为 j 的时候的最大价值 ; 
                dp[i-1][j-weight[i]]代表背包容量为 j-weight[i]时的最大价值，留出 weight[i]的容量来存放 i ;
                dp[i-1][j-weight[i]]+value[i] 选 i 的最大价值。
    

*/
void printArr(vector<vector<int> >&dp);

int main()
{
    int bagWeight = 4;
    //物品价值数组
    int a[3] = {15,20,30};
    vector<int>value(a,a+3);
    //物品重量数组
    int b[3] = {1,3,4};
    vector<int>weight(b,b+3);
    vector<vector<int> >dp(weight.size(),vector<int>(bagWeight+1,0));
    /*对dp数组初始化
      只有物品 0 的时候，背包能装物品的最大值
    */
    for(int j = bagWeight ; j>=weight[0] ; --j )
    {
        dp[0][j] = dp[0][j-weight[0]] + value[0];
        //只有物品 0 ，装或者不装
        //背包容量为 j 的最大价值 = 不装物品 0 的最大价值 + 物品 0 的价值
    }
    /*
    为什么初始化不能直接赋值？
        关于初始化，一定要和 dp数组 的定义吻合！
     为什么不能正序遍历赋值？
        物品 0 会被多次放入
    */

   //确定遍历顺序，先便利物品，在遍历容量
   for(int i=1;i<value.size();++i)//遍历物品
   {
    for(int j=1;j<=bagWeight;++j)//遍历背包容量
    {
        if(j<weight[i])dp[i][j] = dp[i-1][j];//此时背包容量小于第i件物品的重量，装不了物品 i ，直接等于不装 i 的最大价值
        else dp[i][j] = max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i]);
    }
   }
    printArr(dp);
    return 0;
}


void printArr(vector<vector<int> > &dp)
{
    for(int i=0;i<dp.size();++i)
    {
        for(int j=0;j<dp[i].size();++j)
        {
            printf("%3d ",dp[i][j]);
        }
        cout<<endl;
    }
}
