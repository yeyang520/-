/*
    dp[i] 凑足j 所需硬币的最小数
*/
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,INT_MAX);
        dp[0] = 0;
        for(int i=0;i<coins.size();++i)//遍历物品
        {
            for(int j = coins[i];j<=amount;++j)//遍历背包
            {
                if(dp[j - coins[i]]!=INT_MAX)//如果 j -coins[i]是初始值就跳过
                //算上当前的硬币，硬币数量加一，dp[j - coins[i]]为不算上·当前硬币最小数量
                dp[j] = min(dp[j - coins[i]]+1,dp[j]);
            }
        }
        return dp[amount]==INT_MAX?-1:dp[amount];
    }
};
