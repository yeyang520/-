class Solution {
public:
    double largestSumOfAverages(vector<int>& nums, int k) {
        //前缀和 + 动态规划  
        /*
            dp[i][k]表示 将nums中前 i 个数分成 k 个子数组的最大平均值总和
            当数组被分成K组时
            遍历前 i 个数中第 k 个，分成两部分，然后逐渐将前k个数分组，
            dp[i][j] = max(dp[i][j],dp[j][k] + (prefix[i] - prefix[j])/(i-j))
            将前 j 个数进行分组，当用到的时候前 j 个数的分组已经求出
        */
        int n = nums.size();
        vector<double>prefix(n+1,0);
        for(int i=1;i<=n;++i)prefix[i] = prefix[i-1]+nums[i-1];

        //dp[i][k]表示 将nums中前 i 个数分成 k 个子数组的最大平均值总和
        vector<vector<double>>dp(n+1,vector<double>(k+1,0));

        //初始化 分为一组的时候直接是前缀和
        for(int i =1 ;i<=n;++i)dp[i][1] = prefix[i]/i;

        //分多少组
        for(int m=2;m<=k;++m){
            //遍历i,从m开始，分m组，至少要有m个数
            for(int i=m;i<=n;++i){
                //j = m-1 ，j必须得比i小一个才能进行分组
                for(int j = m-1;j<i;++j){
                    dp[i][m] = max(dp[i][m],dp[j][m-1]+(prefix[i]-prefix[j])/(i-j));
                }
            }
        }
        /*
        for (int j = 2; j <= k; j++) {
            for (int i = j; i <= n; i++) {
                for (int x = j - 1; x < i; x++) {
    dp[i][j] = max(dp[i][j], dp[x][j - 1] + (prefix[i] - prefix[x]) / (i - x));
        */
        for(int i=0;i<dp.size();++i)
        {
            for(int j = 0;j<dp[0].size();++j)
            cout<<dp[i][j]<<" ";
            cout<<endl;
        }

        return dp[n][k];
    }
};
